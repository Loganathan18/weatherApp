{"ast":null,"code":"var _jsxFileName = \"D:\\\\IonicProjects\\\\weather-App\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Redirect, Route } from 'react-router-dom';\nimport { IonApp, IonRouterOutlet, useIonViewDidEnter } from '@ionic/react';\nimport { IonReactRouter } from '@ionic/react-router';\nimport Home from './pages/Home';\n/* Core CSS required for Ionic components to work properly */\n\nimport '@ionic/react/css/core.css';\n/* Basic CSS for apps built with Ionic */\n\nimport '@ionic/react/css/normalize.css';\nimport '@ionic/react/css/structure.css';\nimport '@ionic/react/css/typography.css';\n/* Optional CSS utils that can be commented out */\n\nimport '@ionic/react/css/padding.css';\nimport '@ionic/react/css/float-elements.css';\nimport '@ionic/react/css/text-alignment.css';\nimport '@ionic/react/css/text-transformation.css';\nimport '@ionic/react/css/flex-utils.css';\nimport '@ionic/react/css/display.css';\n/* Theme variables */\n\nimport './theme/variables.css';\nimport { useEffect, useState } from 'react';\nimport { Network } from '@capacitor/network';\nimport * as Constants from './common/Constants';\nimport * as Utilities from './common/Utilities';\nimport { Geolocation } from '@capacitor/geolocation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showLoading, setShowLoading] = useState(false);\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  useIonViewDidEnter(() => {\n    const coordinates = Geolocation.getCurrentPosition();\n    coordinates.then(data => {\n      setLatitude(data.coords.latitude);\n      setLongitude(data.coords.longitude);\n    });\n  });\n  useEffect(() => {\n    Utilities.getPersistWeatherData().then(data => {\n      if (data == \"\") {\n        getWeatherData();\n      } else {\n        var interval = setInterval(getWeatherData, 7200000);\n      }\n    });\n\n    if (Utilities.getPersistWeatherData()) {} else {}\n  }, [longitude]);\n\n  async function getWeatherData() {\n    setShowLoading(true);\n    const status = await Network.getStatus();\n\n    if (status.connected && status.connectionType === \"wifi\") {\n      let api_id = Constants.Configs.api_id;\n      const result = await fetch(Constants.Configs.BASE_URL + 'weather?lat=' + latitude + '&lon=' + longitude + '&appid=' + api_id);\n      const data = await result.json();\n      Utilities.persistWeatherData(data);\n    }\n\n    setShowLoading(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(IonApp, {\n    children: /*#__PURE__*/_jsxDEV(IonReactRouter, {\n      children: /*#__PURE__*/_jsxDEV(IonRouterOutlet, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/home\",\n          children: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"k4nOw+93QOxFxp16vZIf+tRRLOM=\", false, function () {\n  return [useIonViewDidEnter];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/IonicProjects/weather-App/src/App.tsx"],"names":["Redirect","Route","IonApp","IonRouterOutlet","useIonViewDidEnter","IonReactRouter","Home","useEffect","useState","Network","Constants","Utilities","Geolocation","App","showLoading","setShowLoading","latitude","setLatitude","longitude","setLongitude","coordinates","getCurrentPosition","then","data","coords","getPersistWeatherData","getWeatherData","interval","setInterval","status","getStatus","connected","connectionType","api_id","Configs","result","fetch","BASE_URL","json","persistWeatherData"],"mappings":"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","sourcesContent":["import { Redirect, Route } from 'react-router-dom';\nimport { IonApp, IonRouterOutlet, useIonViewDidEnter } from '@ionic/react';\nimport { IonReactRouter } from '@ionic/react-router';\nimport Home from './pages/Home';\n\n/* Core CSS required for Ionic components to work properly */\nimport '@ionic/react/css/core.css';\n\n/* Basic CSS for apps built with Ionic */\nimport '@ionic/react/css/normalize.css';\nimport '@ionic/react/css/structure.css';\nimport '@ionic/react/css/typography.css';\n\n/* Optional CSS utils that can be commented out */\nimport '@ionic/react/css/padding.css';\nimport '@ionic/react/css/float-elements.css';\nimport '@ionic/react/css/text-alignment.css';\nimport '@ionic/react/css/text-transformation.css';\nimport '@ionic/react/css/flex-utils.css';\nimport '@ionic/react/css/display.css';\n\n/* Theme variables */\nimport './theme/variables.css';\nimport { useEffect, useState } from 'react';\nimport {Network} from '@capacitor/network';\nimport * as Constants from './common/Constants';\nimport * as Utilities from './common/Utilities';\nimport { Geolocation } from '@capacitor/geolocation';\n\nconst App: React.FC = () => {\n  const [showLoading, setShowLoading] = useState(false);\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  \n  useIonViewDidEnter(()=>{\n    const coordinates = Geolocation.getCurrentPosition();\n    coordinates.then(data=>{\n      setLatitude(data.coords.latitude);\n      setLongitude(data.coords.longitude);\n    });\n  });\n\n  useEffect(()=>{\n    Utilities.getPersistWeatherData().then((data)=>{\n      if(data==\"\"){\n        getWeatherData();\n      } else {\n        var interval = setInterval(getWeatherData, 7200000);\n      }\n    })\n    if(Utilities.getPersistWeatherData()){\n\n    } else {\n      \n    }\n    \n  },[longitude]);\n\n  async function getWeatherData() {\n    setShowLoading(true);\n    const status = await Network.getStatus();\n    \n    if(status.connected && status.connectionType===\"wifi\"){\n      let api_id = Constants.Configs.api_id;\n      const result = await fetch(Constants.Configs.BASE_URL+'weather?lat='+latitude+'&lon='+longitude+'&appid='+api_id);\n      const data = await result.json();\n      Utilities.persistWeatherData(data);\n    }\n    setShowLoading(false);\n  }\n\n  \n  return (\n    <IonApp>\n      <IonReactRouter>\n        <IonRouterOutlet>\n          <Route exact path=\"/home\">\n            <Home />\n          </Route>\n          <Route exact path=\"/\">\n            <Redirect to=\"/home\" />\n          </Route>\n        </IonRouterOutlet>\n      </IonReactRouter>\n    </IonApp>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}