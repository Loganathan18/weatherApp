{"ast":null,"code":"import _regeneratorRuntime from\"D:/IonicProjects/weather-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/IonicProjects/weather-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from'axios';import*as Constants from'./Constants';import{Network}from'@capacitor/network';var APIMethods={GET:\"GET\",POST:\"POST\",PUT:\"PUT\",DELETE:\"DELETE\"};export var APIResult={SUCCESS:\"true\",FAILURE:\"false\"};export var getWeatherReport=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(longtitude,latitude){var data,api_id;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:data={};api_id=Constants.Configs.api_id;return _context.abrupt(\"return\",executeAPI('weather?lat='+latitude+'&lon='+longtitude+'&appid='+api_id,APIMethods.GET,false,data));case 3:case\"end\":return _context.stop();}}},_callee);}));return function getWeatherReport(_x,_x2){return _ref.apply(this,arguments);};}();var executeAPI=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(endpoint,method,authRequired,data,params){var status,headers,response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return Network.getStatus();case 2:status=_context2.sent;if(!status.connected){_context2.next=19;break;}headers={};if(method===APIMethods.POST||method===APIMethods.PUT){headers['Content-Type']='application/x-www-form-urlencoded';}_context2.prev=6;_context2.next=9;return axios({method:method,url:Constants.Configs.BASE_URL+endpoint,data:data,headers:headers,params:params});case 9:response=_context2.sent;console.log(response.data);return _context2.abrupt(\"return\",response.data);case 14:_context2.prev=14;_context2.t0=_context2[\"catch\"](6);return _context2.abrupt(\"return\",{success:false,message:'Error Occurred in the Request!'});case 17:_context2.next=20;break;case 19:alert(\"No Internet Connection\");case 20:case\"end\":return _context2.stop();}}},_callee2,null,[[6,14]]);}));return function executeAPI(_x3,_x4,_x5,_x6,_x7){return _ref2.apply(this,arguments);};}();","map":{"version":3,"sources":["D:/IonicProjects/weather-App/src/common/ServerAPI.tsx"],"names":["axios","Constants","Network","APIMethods","GET","POST","PUT","DELETE","APIResult","SUCCESS","FAILURE","getWeatherReport","longtitude","latitude","data","api_id","Configs","executeAPI","endpoint","method","authRequired","params","getStatus","status","connected","headers","url","BASE_URL","response","console","log","success","message","alert"],"mappings":"mSAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,GAAKC,CAAAA,SAAZ,KAA2B,aAA3B,CAEA,OAASC,OAAT,KAAwB,oBAAxB,CAEA,GAAMC,CAAAA,UAAU,CAAG,CACfC,GAAG,CAAE,KADU,CAEfC,IAAI,CAAE,MAFS,CAGfC,GAAG,CAAE,KAHU,CAIfC,MAAM,CAAE,QAJO,CAAnB,CAOA,MAAO,IAAMC,CAAAA,SAAS,CAAG,CACrBC,OAAO,CAAE,MADY,CAErBC,OAAO,CAAE,OAFY,CAAlB,CAiDP,MAAO,IAAMC,CAAAA,gBAAgB,0FAAG,iBAAOC,UAAP,CAA2BC,QAA3B,kIACxBC,IADwB,CACK,EADL,CAExBC,MAFwB,CAEfd,SAAS,CAACe,OAAV,CAAkBD,MAFH,iCAGrBE,UAAU,CAAC,eAAeJ,QAAf,CAAwB,OAAxB,CAAgCD,UAAhC,CAA2C,SAA3C,CAAqDG,MAAtD,CAA8DZ,UAAU,CAACC,GAAzE,CAA8E,KAA9E,CAAqFU,IAArF,CAHW,wDAAH,kBAAhBH,CAAAA,gBAAgB,gDAAtB,CAMP,GAAMM,CAAAA,UAAU,2FAAG,kBAAOC,QAAP,CAAyBC,MAAzB,CAAsCC,YAAtC,CAA8DN,IAA9D,CAA0EO,MAA1E,yKACMnB,CAAAA,OAAO,CAACoB,SAAR,EADN,QACTC,MADS,oBAGZA,MAAM,CAACC,SAHK,2BAIPC,OAJO,CAIyB,EAJzB,CAKX,GAAIN,MAAM,GAAKhB,UAAU,CAACE,IAAtB,EAA8Bc,MAAM,GAAKhB,UAAU,CAACG,GAAxD,CAA6D,CACzDmB,OAAO,CAAC,cAAD,CAAP,CAA0B,mCAA1B,CACH,CAPU,wCASgBzB,CAAAA,KAAK,CAAC,CACzBmB,MAAM,CAAEA,MADiB,CAEzBO,GAAG,CAAEzB,SAAS,CAACe,OAAV,CAAkBW,QAAlB,CAA6BT,QAFT,CAGzBJ,IAAI,CAAEA,IAHmB,CAIzBW,OAAO,CAAEA,OAJgB,CAKzBJ,MAAM,CAAEA,MALiB,CAAD,CATrB,QASDO,QATC,gBAgBPC,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACd,IAArB,EAhBO,iCAiBAc,QAAQ,CAACd,IAjBT,gGAmBA,CAAEiB,OAAO,CAAE,KAAX,CAAkBC,OAAO,CAAE,gCAA3B,CAnBA,0CAsBXC,KAAK,CAAC,wBAAD,CAAL,CAtBW,uEAAH,kBAAVhB,CAAAA,UAAU,8DAAhB","sourcesContent":["import axios from 'axios';\nimport * as Constants from './Constants';\nimport * as Utilities from './Utilities';\nimport { Network } from '@capacitor/network';\n\nconst APIMethods = {\n    GET: \"GET\",\n    POST: \"POST\",\n    PUT: \"PUT\",\n    DELETE: \"DELETE\"\n}\n\nexport const APIResult = {\n    SUCCESS: \"true\",\n    FAILURE: \"false\"\n}\n\nexport interface Weather{\n    id:string;\n    main:string;\n    description:string;\n    icon:string;\n}\n\nexport interface Main{\n    temp: string;\n    feels_like: string;\n    temp_min: string;\n    temp_max: string;\n    pressure: string;\n    humidity: string;\n    sea_level: string;\n    grnd_level: string;\n}\n\nexport interface Wind{\n    speed:string;\n    deg:string;\n    gust:string;\n}\n\nexport interface Sys{\n    \"type\": number;\n    \"id\": number;\n    \"country\": string;\n    \"sunrise\": string;\n    \"sunset\": number;\n}\n\nexport interface WeatherRes{\n    \"dt\": number;\n    \"timezone\": number;\n    \"id\": number;\n    \"name\": string;\n    \"sys\": Sys;\n    \"wind\": Wind;\n    \"main\": Main;\n    \"weather\": Weather[];\n}\n\n\nexport const getWeatherReport = async (longtitude: Number, latitude: Number) => {\n    let data: { [k: string]: any } = {};\n    let api_id = Constants.Configs.api_id;\n    return executeAPI('weather?lat='+latitude+'&lon='+longtitude+'&appid='+api_id, APIMethods.GET, false, data);\n}\n\nconst executeAPI = async (endpoint: string, method: any, authRequired?: boolean, data?: any, params?: any) => {\n    const status = await Network.getStatus();\n    //&& status.connectionType===\"wifi\"\n    if(status.connected ){\n        let headers: { [k: string]: any } = {};\n        if (method === APIMethods.POST || method === APIMethods.PUT) {\n            headers['Content-Type'] = 'application/x-www-form-urlencoded';\n        }\n        try {\n            const response = await axios({\n                method: method,\n                url: Constants.Configs.BASE_URL + endpoint,\n                data: data,\n                headers: headers,\n                params: params\n            });\n            console.log(response.data);\n            return response.data;\n        } catch (error) {\n            return { success: false, message: 'Error Occurred in the Request!' }\n        }\n    } else {\n        alert(\"No Internet Connection\");\n    }\n    \n}\n\n"]},"metadata":{},"sourceType":"module"}