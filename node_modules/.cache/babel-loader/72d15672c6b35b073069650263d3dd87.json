{"ast":null,"code":"import _regeneratorRuntime from \"D:/IonicProjects/weather-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/IonicProjects/weather-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:/IonicProjects/weather-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/IonicProjects/weather-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/IonicProjects/weather-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/IonicProjects/weather-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { WebPlugin } from '@capacitor/core';\n\nfunction translatedConnection() {\n  var connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\n  var result = 'unknown';\n  var type = connection ? connection.type || connection.effectiveType : null;\n\n  if (type && typeof type === 'string') {\n    switch (type) {\n      // possible type values\n      case 'bluetooth':\n      case 'cellular':\n        result = 'cellular';\n        break;\n\n      case 'none':\n        result = 'none';\n        break;\n\n      case 'ethernet':\n      case 'wifi':\n      case 'wimax':\n        result = 'wifi';\n        break;\n\n      case 'other':\n      case 'unknown':\n        result = 'unknown';\n        break;\n      // possible effectiveType values\n\n      case 'slow-2g':\n      case '2g':\n      case '3g':\n        result = 'cellular';\n        break;\n\n      case '4g':\n        result = 'wifi';\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return result;\n}\n\nexport var NetworkWeb = /*#__PURE__*/function (_WebPlugin) {\n  _inherits(NetworkWeb, _WebPlugin);\n\n  var _super = _createSuper(NetworkWeb);\n\n  function NetworkWeb() {\n    var _this;\n\n    _classCallCheck(this, NetworkWeb);\n\n    _this = _super.call(this);\n\n    _this.handleOnline = function () {\n      var connectionType = translatedConnection();\n      var status = {\n        connected: true,\n        connectionType: connectionType\n      };\n\n      _this.notifyListeners('networkStatusChange', status);\n    };\n\n    _this.handleOffline = function () {\n      var status = {\n        connected: false,\n        connectionType: 'none'\n      };\n\n      _this.notifyListeners('networkStatusChange', status);\n    };\n\n    window.addEventListener('online', _this.handleOnline);\n    window.addEventListener('offline', _this.handleOffline);\n    return _this;\n  }\n\n  _createClass(NetworkWeb, [{\n    key: \"getStatus\",\n    value: function () {\n      var _getStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var connected, connectionType, status;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (window.navigator) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw this.unavailable('Browser does not support the Network Information API');\n\n              case 2:\n                connected = window.navigator.onLine;\n                connectionType = translatedConnection();\n                status = {\n                  connected: connected,\n                  connectionType: connected ? connectionType : 'none'\n                };\n                return _context.abrupt(\"return\", status);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getStatus() {\n        return _getStatus.apply(this, arguments);\n      }\n\n      return getStatus;\n    }()\n  }]);\n\n  return NetworkWeb;\n}(WebPlugin);\nvar Network = new NetworkWeb();\nexport { Network };","map":{"version":3,"sources":["../../src/web.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,SAAT,QAA0B,iBAA1B;;AAgBA,SAAS,oBAAT,GAA6B;AAC3B,MAAM,UAAU,GACd,MAAM,CAAC,SAAP,CAAiB,UAAjB,IACA,MAAM,CAAC,SAAP,CAAiB,aADjB,IAEA,MAAM,CAAC,SAAP,CAAiB,gBAHnB;AAIA,MAAI,MAAM,GAAmB,SAA7B;AACA,MAAM,IAAI,GAAG,UAAU,GAAG,UAAU,CAAC,IAAX,IAAmB,UAAU,CAAC,aAAjC,GAAiD,IAAxE;;AACA,MAAI,IAAI,IAAI,OAAO,IAAP,KAAgB,QAA5B,EAAsC;AACpC,YAAQ,IAAR;AACE;AACA,WAAK,WAAL;AACA,WAAK,UAAL;AACE,QAAA,MAAM,GAAG,UAAT;AACA;;AACF,WAAK,MAAL;AACE,QAAA,MAAM,GAAG,MAAT;AACA;;AACF,WAAK,UAAL;AACA,WAAK,MAAL;AACA,WAAK,OAAL;AACE,QAAA,MAAM,GAAG,MAAT;AACA;;AACF,WAAK,OAAL;AACA,WAAK,SAAL;AACE,QAAA,MAAM,GAAG,SAAT;AACA;AACF;;AACA,WAAK,SAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACE,QAAA,MAAM,GAAG,UAAT;AACA;;AACF,WAAK,IAAL;AACE,QAAA,MAAM,GAAG,MAAT;AACA;;AACF;AACE;AA5BJ;AA8BD;;AACD,SAAO,MAAP;AACD;;AAED,WAAa,UAAb;AAAA;;AAAA;;AACE,wBAAA;AAAA;;AAAA;;AACE;;AAuBM,UAAA,YAAA,GAAe,YAAK;AAC1B,UAAM,cAAc,GAAG,oBAAoB,EAA3C;AAEA,UAAM,MAAM,GAAqB;AAC/B,QAAA,SAAS,EAAE,IADoB;AAE/B,QAAA,cAAc,EAAE;AAFe,OAAjC;;AAKA,YAAK,eAAL,CAAqB,qBAArB,EAA4C,MAA5C;AACD,KATO;;AAWA,UAAA,aAAA,GAAgB,YAAK;AAC3B,UAAM,MAAM,GAAqB;AAC/B,QAAA,SAAS,EAAE,KADoB;AAE/B,QAAA,cAAc,EAAE;AAFe,OAAjC;;AAKA,YAAK,eAAL,CAAqB,qBAArB,EAA4C,MAA5C;AACD,KAPO;;AAjCN,IAAA,MAAM,CAAC,gBAAP,CAAwB,QAAxB,EAAkC,MAAK,YAAvC;AACA,IAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,MAAK,aAAxC;AAHF;AAIC;;AALH;AAAA;AAAA;AAAA,gFAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACO,MAAM,CAAC,SADd;AAAA;AAAA;AAAA;;AAAA,sBAEU,KAAK,WAAL,CACJ,sDADI,CAFV;;AAAA;AAOQ,gBAAA,SAPR,GAOoB,MAAM,CAAC,SAAP,CAAiB,MAPrC;AAQQ,gBAAA,cARR,GAQyB,oBAAoB,EAR7C;AAUQ,gBAAA,MAVR,GAUmC;AAC/B,kBAAA,SAAS,EAAT,SAD+B;AAE/B,kBAAA,cAAc,EAAE,SAAS,GAAG,cAAH,GAAoB;AAFd,iBAVnC;AAAA,iDAeS,MAfT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAPF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAgC,SAAhC;AA8CA,IAAM,OAAO,GAAG,IAAI,UAAJ,EAAhB;AAEA,SAAS,OAAT","sourceRoot":"","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction translatedConnection() {\n    const connection = window.navigator.connection ||\n        window.navigator.mozConnection ||\n        window.navigator.webkitConnection;\n    let result = 'unknown';\n    const type = connection ? connection.type || connection.effectiveType : null;\n    if (type && typeof type === 'string') {\n        switch (type) {\n            // possible type values\n            case 'bluetooth':\n            case 'cellular':\n                result = 'cellular';\n                break;\n            case 'none':\n                result = 'none';\n                break;\n            case 'ethernet':\n            case 'wifi':\n            case 'wimax':\n                result = 'wifi';\n                break;\n            case 'other':\n            case 'unknown':\n                result = 'unknown';\n                break;\n            // possible effectiveType values\n            case 'slow-2g':\n            case '2g':\n            case '3g':\n                result = 'cellular';\n                break;\n            case '4g':\n                result = 'wifi';\n                break;\n            default:\n                break;\n        }\n    }\n    return result;\n}\nexport class NetworkWeb extends WebPlugin {\n    constructor() {\n        super();\n        this.handleOnline = () => {\n            const connectionType = translatedConnection();\n            const status = {\n                connected: true,\n                connectionType: connectionType,\n            };\n            this.notifyListeners('networkStatusChange', status);\n        };\n        this.handleOffline = () => {\n            const status = {\n                connected: false,\n                connectionType: 'none',\n            };\n            this.notifyListeners('networkStatusChange', status);\n        };\n        window.addEventListener('online', this.handleOnline);\n        window.addEventListener('offline', this.handleOffline);\n    }\n    async getStatus() {\n        if (!window.navigator) {\n            throw this.unavailable('Browser does not support the Network Information API');\n        }\n        const connected = window.navigator.onLine;\n        const connectionType = translatedConnection();\n        const status = {\n            connected,\n            connectionType: connected ? connectionType : 'none',\n        };\n        return status;\n    }\n}\nconst Network = new NetworkWeb();\nexport { Network };\n//# sourceMappingURL=web.js.map"]},"metadata":{},"sourceType":"module"}