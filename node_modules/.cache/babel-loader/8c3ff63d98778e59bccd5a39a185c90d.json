{"ast":null,"code":"import { WebPlugin } from '@capacitor/core';\n\nfunction translatedConnection() {\n  const connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\n  let result = 'unknown';\n  const type = connection ? connection.type || connection.effectiveType : null;\n\n  if (type && typeof type === 'string') {\n    switch (type) {\n      // possible type values\n      case 'bluetooth':\n      case 'cellular':\n        result = 'cellular';\n        break;\n\n      case 'none':\n        result = 'none';\n        break;\n\n      case 'ethernet':\n      case 'wifi':\n      case 'wimax':\n        result = 'wifi';\n        break;\n\n      case 'other':\n      case 'unknown':\n        result = 'unknown';\n        break;\n      // possible effectiveType values\n\n      case 'slow-2g':\n      case '2g':\n      case '3g':\n        result = 'cellular';\n        break;\n\n      case '4g':\n        result = 'wifi';\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return result;\n}\n\nexport class NetworkWeb extends WebPlugin {\n  constructor() {\n    super();\n\n    this.handleOnline = () => {\n      const connectionType = translatedConnection();\n      const status = {\n        connected: true,\n        connectionType: connectionType\n      };\n      this.notifyListeners('networkStatusChange', status);\n    };\n\n    this.handleOffline = () => {\n      const status = {\n        connected: false,\n        connectionType: 'none'\n      };\n      this.notifyListeners('networkStatusChange', status);\n    };\n\n    window.addEventListener('online', this.handleOnline);\n    window.addEventListener('offline', this.handleOffline);\n  }\n\n  async getStatus() {\n    if (!window.navigator) {\n      throw this.unavailable('Browser does not support the Network Information API');\n    }\n\n    const connected = window.navigator.onLine;\n    const connectionType = translatedConnection();\n    const status = {\n      connected,\n      connectionType: connected ? connectionType : 'none'\n    };\n    return status;\n  }\n\n}\nconst Network = new NetworkWeb();\nexport { Network };","map":{"version":3,"sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,iBAA1B;;AAgBA,SAAS,oBAAT,GAA6B;AAC3B,QAAM,UAAU,GACd,MAAM,CAAC,SAAP,CAAiB,UAAjB,IACA,MAAM,CAAC,SAAP,CAAiB,aADjB,IAEA,MAAM,CAAC,SAAP,CAAiB,gBAHnB;AAIA,MAAI,MAAM,GAAmB,SAA7B;AACA,QAAM,IAAI,GAAG,UAAU,GAAG,UAAU,CAAC,IAAX,IAAmB,UAAU,CAAC,aAAjC,GAAiD,IAAxE;;AACA,MAAI,IAAI,IAAI,OAAO,IAAP,KAAgB,QAA5B,EAAsC;AACpC,YAAQ,IAAR;AACE;AACA,WAAK,WAAL;AACA,WAAK,UAAL;AACE,QAAA,MAAM,GAAG,UAAT;AACA;;AACF,WAAK,MAAL;AACE,QAAA,MAAM,GAAG,MAAT;AACA;;AACF,WAAK,UAAL;AACA,WAAK,MAAL;AACA,WAAK,OAAL;AACE,QAAA,MAAM,GAAG,MAAT;AACA;;AACF,WAAK,OAAL;AACA,WAAK,SAAL;AACE,QAAA,MAAM,GAAG,SAAT;AACA;AACF;;AACA,WAAK,SAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACE,QAAA,MAAM,GAAG,UAAT;AACA;;AACF,WAAK,IAAL;AACE,QAAA,MAAM,GAAG,MAAT;AACA;;AACF;AACE;AA5BJ;AA8BD;;AACD,SAAO,MAAP;AACD;;AAED,OAAM,MAAO,UAAP,SAA0B,SAA1B,CAAmC;AACvC,EAAA,WAAA,GAAA;AACE;;AAuBM,SAAA,YAAA,GAAe,MAAK;AAC1B,YAAM,cAAc,GAAG,oBAAoB,EAA3C;AAEA,YAAM,MAAM,GAAqB;AAC/B,QAAA,SAAS,EAAE,IADoB;AAE/B,QAAA,cAAc,EAAE;AAFe,OAAjC;AAKA,WAAK,eAAL,CAAqB,qBAArB,EAA4C,MAA5C;AACD,KATO;;AAWA,SAAA,aAAA,GAAgB,MAAK;AAC3B,YAAM,MAAM,GAAqB;AAC/B,QAAA,SAAS,EAAE,KADoB;AAE/B,QAAA,cAAc,EAAE;AAFe,OAAjC;AAKA,WAAK,eAAL,CAAqB,qBAArB,EAA4C,MAA5C;AACD,KAPO;;AAjCN,IAAA,MAAM,CAAC,gBAAP,CAAwB,QAAxB,EAAkC,KAAK,YAAvC;AACA,IAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,KAAK,aAAxC;AACD;;AAEc,QAAT,SAAS,GAAA;AACb,QAAI,CAAC,MAAM,CAAC,SAAZ,EAAuB;AACrB,YAAM,KAAK,WAAL,CACJ,sDADI,CAAN;AAGD;;AAED,UAAM,SAAS,GAAG,MAAM,CAAC,SAAP,CAAiB,MAAnC;AACA,UAAM,cAAc,GAAG,oBAAoB,EAA3C;AAEA,UAAM,MAAM,GAAqB;AAC/B,MAAA,SAD+B;AAE/B,MAAA,cAAc,EAAE,SAAS,GAAG,cAAH,GAAoB;AAFd,KAAjC;AAKA,WAAO,MAAP;AACD;;AAvBsC;AA8CzC,MAAM,OAAO,GAAG,IAAI,UAAJ,EAAhB;AAEA,SAAS,OAAT","sourceRoot":"","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction translatedConnection() {\n    const connection = window.navigator.connection ||\n        window.navigator.mozConnection ||\n        window.navigator.webkitConnection;\n    let result = 'unknown';\n    const type = connection ? connection.type || connection.effectiveType : null;\n    if (type && typeof type === 'string') {\n        switch (type) {\n            // possible type values\n            case 'bluetooth':\n            case 'cellular':\n                result = 'cellular';\n                break;\n            case 'none':\n                result = 'none';\n                break;\n            case 'ethernet':\n            case 'wifi':\n            case 'wimax':\n                result = 'wifi';\n                break;\n            case 'other':\n            case 'unknown':\n                result = 'unknown';\n                break;\n            // possible effectiveType values\n            case 'slow-2g':\n            case '2g':\n            case '3g':\n                result = 'cellular';\n                break;\n            case '4g':\n                result = 'wifi';\n                break;\n            default:\n                break;\n        }\n    }\n    return result;\n}\nexport class NetworkWeb extends WebPlugin {\n    constructor() {\n        super();\n        this.handleOnline = () => {\n            const connectionType = translatedConnection();\n            const status = {\n                connected: true,\n                connectionType: connectionType,\n            };\n            this.notifyListeners('networkStatusChange', status);\n        };\n        this.handleOffline = () => {\n            const status = {\n                connected: false,\n                connectionType: 'none',\n            };\n            this.notifyListeners('networkStatusChange', status);\n        };\n        window.addEventListener('online', this.handleOnline);\n        window.addEventListener('offline', this.handleOffline);\n    }\n    async getStatus() {\n        if (!window.navigator) {\n            throw this.unavailable('Browser does not support the Network Information API');\n        }\n        const connected = window.navigator.onLine;\n        const connectionType = translatedConnection();\n        const status = {\n            connected,\n            connectionType: connected ? connectionType : 'none',\n        };\n        return status;\n    }\n}\nconst Network = new NetworkWeb();\nexport { Network };\n//# sourceMappingURL=web.js.map"]},"metadata":{},"sourceType":"module"}